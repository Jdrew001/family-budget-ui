name: Family Budget App Staging [Archiving] Pipeline

on:
  pull_request:
    types:
      - closed

jobs:

  #### Intention is to check what alias has been added to the commit message ####
  check-commit-message:
    name: Check Commit Message
    runs-on: ubuntu-latest
    outputs:
      get-commit-message: ${{ steps.get-commit-message.outputs.headCommitMsg }}
      check-archive-alias: ${{ steps.check-archive-alias.outputs.archive_present }}

    steps:
      - name: Check Commit Message
        id: check-commit-message
        uses: actions/checkout@v2

      - name: Get Commit Message
        id: get-commit-message
        run: echo "::set-output name=headCommitMsg::$(git show -s --format=%s)"

      - name: Check for "archive" alias
        id: check-archive-alias
        run: |
          if [[ ${{ contains(steps.get-commit-message.outputs.headCommitMsg, '[ARCHIVE]') }} ]]; then
            echo "Commit message contains 'ARCHIVE'"
            echo "::set-output name=archive_present::true"
          else
            echo "Commit message does not contain 'ARCHIVE'"
            echo "::set-output name=archive_present::false"
          fi

  #### Run the android build and ios build concurrently -- run only if archive true ####
  build-android:
    name: Build Android
    needs: check-commit-message
    runs-on: ubuntu-latest
    if: ${{ needs.check-commit-message.outputs.check-archive-alias == 'true' }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Setup java
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Install Ionic
        run: npm install -g @ionic/cli

      - name: Install app dependencies
        run: npm install --force

      - name: sync android
        run: ionic cap sync android -c=development

      - name: Generate the Android App Bundle
        working-directory: ./android/
        run: |
          chmod +x gradlew
          ./gradlew assembleDebug

      - name: Upload dev APK
        uses: actions/upload-artifact@v1
        with:
          name: app-dev
          path: android/app/build/outputs/apk/debug/app-debug.apk

  #Deploy both Android and Ios if previous steps are successful
  deploy-android:
    name: Deploy Android App - Firebase
    needs: [build-android]
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with: 
          name: app-dev
          path: project/apk

      - name: upload artifact to Firebase
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.ANDROID_ID}}
          serviceCredentialsFileContent: ${{secrets.CREDENTIAL_FILE_CONTENT}}
          groups: DEVELOPMENT
          file: project/apk/app-debug.apk
          debug: true #this will show the verbose log